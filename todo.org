* Shell Implementation TODO List
  - [-] Command Parsing
    - [X] Tokenization: Break input into commands and arguments.
    - [X] Redirection: Handle input/output redirection (e.g., `>`, `<`, `>>`).

        1. **`<` (Input Redirection):** 

        This symbol is used to redirect the input of a command from a file. For example:

           command < inputfile

        Here, `command` will read its input from `inputfile` instead of the standard input (usually the keyboard).

        2. **`>` (Output Redirection):** 

        This symbol redirects the output of a command to a file, overwriting the file if it already exists. For example:

           command > outputfile

        Here, `command` will send its output to `outputfile`, replacing the file's current contents. If `outputfile` does not exist, it will be created.

        3. **`>>` (Append Redirection):** 

        This symbol also redirects the output of a command to a file, but it appends the output to the end of the file rather than overwriting it. For example:

           command >> outputfile

        Here, `command` will send its output to `outputfile`, but it will add the output to the end of the file, preserving the existing contents.

    - [ ] Pipes: Manage command pipelines (e.g., `|`).
    - [X] Background Execution: Support background processes (e.g., `&`).

  - [ ] Command Execution
    - [ ] Process Creation: Use system calls like `fork()` to create processes.
    - [ ] Execution: Use `exec()` family of functions to execute commands.
    - [ ] Wait/Non-Blocking: Manage process synchronization with `wait()` or similar mechanisms.

  - [-] Built-in Commands
    - [X] Changing Directory: Implement `cd`.
    - [ ] Environment Variables: Implement `export`, `unset`, and `env` functionalities.
    - [X] Command History: Keep a history of commands entered.
    - [ ] Job Control: Manage job status (`jobs`, `fg`, `bg`, `kill`).

  - [ ] Signal Handling
    - [ ] Interrupts: Handle signals like SIGINT (Ctrl+C) and SIGTSTP (Ctrl+Z).
        SIGINT (Signal Interrupt):
            Number: 2
            Description: Sent to a process when the user types the interrupt character (usually Ctrl+C) in the terminal. It typically causes the process to terminate, though it can be caught and handled by the process.

        SIGTERM (Signal Terminate):
            Number: 15
            Description: A request to terminate a process gracefully. It allows the process to clean up resources and exit in an orderly manner. This is the default signal sent by commands like kill if no signal is specified.

        SIGKILL (Signal Kill):
            Number: 9
            Description: Forces a process to terminate immediately. It cannot be caught, blocked, or ignored by the process. This is used when a process does not terminate with SIGTERM.

        SIGQUIT (Signal Quit):
            Number: 3
            Description: Similar to SIGINT, but also causes the process to produce a core dump, which is useful for debugging. It’s usually triggered by typing Ctrl+).

        SIGHUP (Signal Hang Up):
            Number: 1
            Description: Sent to a process when its controlling terminal is closed. It is often used to tell a process to reinitialize or reload its configuration files.

        SIGUSR1 (Signal User Defined 1):
            Number: 10 (on most systems)
            Description: Reserved for user-defined purposes. Processes can handle this signal in any way they choose, and it’s often used for custom behavior.

        SIGUSR2 (Signal User Defined 2):
            Number: 12 (on most systems)
            Description: Similar to SIGUSR1, this signal is also reserved for user-defined purposes and can be used for custom actions.

        SIGSEGV (Signal Segmentation Violation):
            Number: 11
            Description: Sent when a process attempts to access an invalid memory location (segmentation fault). This is usually a sign of a bug in the program.

        SIGPIPE (Signal Pipe):
            Number: 13
            Description: Sent to a process when it tries to write to a pipe that has been closed on the other end. This usually results in the process being terminated unless it handles the signal.

        SIGALRM (Signal Alarm):
            Number: 14
            Description: Sent when a timer set by the alarm function expires. It’s used for handling timeouts and scheduling.

        SIGCHLD (Signal Child):
            Number: 17
            Description: Sent to a process when a child process terminates or stops. This is often used by parent processes to handle or clean up after child processes.

        SIGSTOP (Signal Stop):
            Number: 19
            Description: Stops (pauses) a process. Unlike SIGTSTP, this signal cannot be caught or ignored. It’s used by the system to pause processes.

        SIGCONT (Signal Continue):
            Number: 18
            Description: Resumes a process that was stopped by SIGSTOP or SIGTSTP.

        SIGTSTP (Signal Terminal Stop):
            Number: 20
            Description: Sent when the user types the stop character (usually Ctrl+Z) in the terminal. It stops (pauses) the process, but the process can catch and handle this signal.

    - [ ] Custom Signal Handling: Implement custom signal handlers for shell-specific behavior.

  - [ ] Input/Output Redirection
    - [ ] File Descriptors: Redirect input/output streams to/from files.
    - [ ] Pipes: Connect the output of one command to the input of another.

  - [ ] Environment Management
    - [ ] Environment Variables: Set and access environment variables.
    - [ ] Path Resolution: Manage `PATH` for locating executables.

  - [ ] Command Substitution
    - [ ] Evaluation: Handle commands within `$(...)` or `` `...` ``.

  - [ ] Wildcard Expansion
    - [ ] Globbing: Expand wildcard characters like `*`, `?`, and `[...]`.

  - [ ] Scripting Capabilities
    - [ ] Control Structures: Implement if-else, loops (for, while), and case statements.
    - [ ] Function Definitions: Support shell functions.

  - [ ] Error Handling
    - [ ] Exit Statuses: Handle and report process exit statuses.
    - [ ] Error Messages: Provide informative error messages.

  - [-] User Input and Output
    - [X] Prompts: Display prompts and read user input.
    - [ ] Command Completion: Implement tab-completion features.

  - [ ] Configuration Files
    - [ ] Initialization: Read and apply settings from configuration files like `.bashrc` or `.profile`.

  - [ ] Security Considerations
    - [ ] Permissions: Manage user permissions and access control.
    - [ ] Sanitization: Handle and sanitize input to prevent injection attacks.

  - [ ] Extensibility
    - [ ] Plugins/Extensions: Allow for modular extensions or plugins to add functionality.

  - [ ] Interactive Features
    - [ ] Line Editing: Implement line-editing capabilities (e.g., cursor movement, history navigation).
    - [ ] Tab Completion: Support automatic completion of commands and file names.

